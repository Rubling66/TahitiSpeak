export interface AccessibilityRule {
  id: string;
  name: string;
  description: string;
  level: 'A' | 'AA' | 'AAA';
  category: 'perceivable' | 'operable' | 'understandable' | 'robust';
  automated: boolean;
  severity: 'error' | 'warning' | 'info';
}

export interface AccessibilityViolation {
  id: string;
  ruleId: string;
  element: string;
  message: string;
  severity: 'error' | 'warning' | 'info';
  line?: number;
  column?: number;
  selector: string;
  suggestion?: string;
  autoFixable: boolean;
}

export interface AccessibilityReport {
  id: string;
  contentId: string;
  timestamp: Date;
  score: number;
  level: 'A' | 'AA' | 'AAA';
  violations: AccessibilityViolation[];
  passedRules: string[];
  summary: {
    total: number;
    errors: number;
    warnings: number;
    passed: number;
  };
}

export interface CaptionTrack {
  id: string;
  language: string;
  label: string;
  src: string;
  kind: 'subtitles' | 'captions' | 'descriptions' | 'chapters' | 'metadata';
  default: boolean;
  autoGenerated: boolean;
  accuracy?: number;
}

export interface Transcript {
  id: string;
  contentId: string;
  language: string;
  text: string;
  timestamps: {
    start: number;
    end: number;
    text: string;
  }[];
  autoGenerated: boolean;
  reviewed: boolean;
}

export interface ScreenReaderOptimization {
  altText: string;
  ariaLabels: Record<string, string>;
  headingStructure: {
    level: number;
    text: string;
    id: string;
  }[];
  landmarks: {
    type: string;
    label: string;
    selector: string;
  }[];
  skipLinks: {
    text: string;
    target: string;
  }[];
}

export interface KeyboardNavigation {
  tabOrder: string[];
  shortcuts: {
    key: string;
    action: string;
    description: string;
  }[];
  focusManagement: {
    trapFocus: boolean;
    restoreFocus: boolean;
    initialFocus?: string;
  };
}

export interface SCORMPackage {
  id: string;
  version: '1.2' | '2004';
  manifest: string;
  files: {
    path: string;
    size: number;
    type: string;
  }[];
  metadata: {
    title: string;
    description: string;
    keywords: string[];
    duration?: number;
    difficulty?: string;
  };
  launchData?: string;
  prerequisites?: string[];
}

export interface xAPIStatement {
  id: string;
  actor: {
    name: string;
    mbox?: string;
    account?: {
      homePage: string;
      name: string;
    };
  };
  verb: {
    id: string;
    display: Record<string, string>;
  };
  object: {
    id: string;
    definition?: {
      name: Record<string, string>;
      description: Record<string, string>;
      type?: string;
    };
  };
  result?: {
    score?: {
      scaled?: number;
      raw?: number;
      min?: number;
      max?: number;
    };
    completion?: boolean;
    success?: boolean;
    duration?: string;
  };
  context?: {
    instructor?: any;
    team?: any;
    contextActivities?: any;
    language?: string;
  };
  timestamp: Date;
}

export interface ComplianceStandard {
  id: string;
  name: string;
  version: string;
  requirements: {
    id: string;
    description: string;
    mandatory: boolean;
    testable: boolean;
  }[];
  certification?: {
    authority: string;
    validUntil: Date;
    certificateUrl?: string;
  };
}

export interface AccessibilityAPI {
  // WCAG Compliance
  checkCompliance(contentId: string, level: 'A' | 'AA' | 'AAA'): Promise<AccessibilityReport>;
  autoFixViolations(contentId: string, violationIds: string[]): Promise<boolean>;
  generateReport(contentId: string): Promise<AccessibilityReport>;
  
  // Screen Reader Optimization
  optimizeForScreenReader(contentId: string): Promise<ScreenReaderOptimization>;
  validateAriaLabels(contentId: string): Promise<AccessibilityViolation[]>;
  generateAltText(imageUrl: string): Promise<string>;
  
  // Captioning and Transcripts
  generateCaptions(videoId: string, language: string): Promise<CaptionTrack>;
  createTranscript(audioId: string, language: string): Promise<Transcript>;
  translateCaptions(captionId: string, targetLanguage: string): Promise<CaptionTrack>;
  
  // Keyboard Navigation
  validateKeyboardAccess(contentId: string): Promise<AccessibilityViolation[]>;
  optimizeTabOrder(contentId: string): Promise<KeyboardNavigation>;
  
  // Standards Compliance
  validateSCORM(packagePath: string): Promise<{ valid: boolean; errors: string[] }>;
  createxAPIStatement(statement: Partial<xAPIStatement>): Promise<xAPIStatement>;
  validateCompliance(standard: string, contentId: string): Promise<ComplianceStandard>;
  
  // Multi-language Support
  detectLanguage(text: string): Promise<string>;
  validateRTL(contentId: string): Promise<AccessibilityViolation[]>;
  optimizeForLanguage(contentId: string, language: string): Promise<void>;
}